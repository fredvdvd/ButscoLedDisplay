#define  ROBOTRON_WIDTH      7
#define  ROBOTRON_HEIGHT     7
#define  ROBOTRON_CHAR_LOW   32
#define  ROBOTRON_CHAR_HIGH  96

/* Binary constant generator macro By Tom Torfs - donated to the public domain */
/* All macro's evaluate to compile-time constants */
#define HEX__(n) 0x##n##LU
#define B8__(x) ((x&0x0000000FLU)?1:0) +((x&0x000000F0LU)?2:0) +((x&0x00000F00LU)?4:0) +((x&0x0000F000LU)?8:0) \
				+((x&0x000F0000LU)?16:0) +((x&0x00F00000LU)?32:0) +((x&0x0F000000LU)?64:0) +((x&0xF0000000LU)?128:0)
#define B8(d) ((unsigned char)B8__(HEX__(d)))
#define B16(dmsb,dlsb) (((unsigned short)B8(dmsb)<<8) + B8(dlsb))
#define B32(dmsb,db2,db3,dlsb) (((unsigned long)B8(dmsb)<<24) + ((unsigned long)B8(db2)<<16) + ((unsigned long)B8(db3)<<8) + B8(dlsb))

const uint8_t RobotronData[] = {
					B8(00000000),	// Char  
					B8(00000000),
					B8(00000000),
					B8(00000000),
					B8(00000000),
					B8(00000000),
					B8(00000000),

					B8(0001100),	// Char !
					B8(0001100),
					B8(0001100),
					B8(0001100),
					B8(0000000),
					B8(0001100),
					B8(0001100),

					B8(0011011),	// Char "
					B8(0011011),
					B8(0110110),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),

					B8(0010100),	// Char #
					B8(0010100),
					B8(1111111),
					B8(0010100),
					B8(1111111),
					B8(0010100),
					B8(0010100),

					B8(0000000),	// Char $
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),

					B8(1100011),	// Char %
					B8(1100110),
					B8(0001100),
					B8(0011000),
					B8(0110011),
					B8(1100011),
					B8(0000000),

					B8(0000000),	// Char &
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),

					B8(0001100),	// Char '
					B8(0001100),
					B8(0011000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),

					B8(0000110),	// Char (
					B8(0001100),
					B8(0001100),
					B8(0001100),
					B8(0001100),
					B8(0001100),
					B8(0000110),

					B8(0110000),	// Char )
					B8(0011000),
					B8(0011000),
					B8(0011000),
					B8(0011000),
					B8(0011000),
					B8(0110000),

					B8(1001001),	// Char *
					B8(0101010),
					B8(0011100),
					B8(1111111),
					B8(0011100),
					B8(0101010),
					B8(1001001),

					B8(0000000),	// Char +
					B8(0001100),
					B8(0001100),
					B8(0111111),
					B8(0001100),
					B8(0001100),
					B8(0000000),

					B8(0000000),	// Char ),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0001100),
					B8(0001100),
					B8(0011000),

					B8(0000000),	// Char -
					B8(0000000),
					B8(0000000),
					B8(0111110),
					B8(0000000),
					B8(0000000),
					B8(0000000),

					B8(0000000),	// Char .
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0011000),
					B8(0011000),

					B8(0000011),	// Char /
					B8(0000110),
					B8(0001100),
					B8(0011000),
					B8(0110000),
					B8(1100000),
					B8(1000000),

					B8(0111110),	// Char 0
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(0111110),

					B8(0001100),	// Char 1
					B8(0011100),
					B8(0001100),
					B8(0001100),
					B8(0001100),
					B8(0001100),
					B8(0001100),

					B8(0111110),	// Char 2
					B8(1100011),
					B8(0000011),
					B8(0001110),
					B8(0111000),
					B8(1100000),
					B8(1111111),

					B8(0111110),	// Char 3
					B8(1100011),
					B8(0000011),
					B8(0011110),
					B8(0000011),
					B8(1100011),
					B8(0111110),

					B8(0001110),	// Char 4
					B8(0011110),
					B8(0110110),
					B8(1100110),
					B8(1111111),
					B8(0000110),
					B8(0000110),

					B8(1111111),	// Char 5
					B8(1100000),
					B8(1111111),
					B8(0000011),
					B8(0000011),
					B8(1100011),
					B8(0111110),

					B8(0011110),	// Char 6
					B8(0110000),
					B8(1100000),
					B8(1111110),
					B8(1100011),
					B8(1100011),
					B8(0111110),

					B8(1111111),	// Char 7
					B8(0000011),
					B8(0000110),
					B8(0001100),
					B8(0011000),
					B8(0011000),
					B8(0011000),

					B8(0111110),	// Char 8
					B8(1100011),
					B8(1100011),
					B8(0111110),
					B8(1100011),
					B8(1100011),
					B8(0111110),

					B8(0111110),	// Char 9
					B8(1100011),
					B8(1100011),
					B8(0111111),
					B8(0000011),
					B8(0000110),
					B8(0111100),

					B8(0000000),	// Char :
					B8(0011000),
					B8(0011000),
					B8(0000000),
					B8(0011000),
					B8(0011000),
					B8(0000000),

					B8(0000000),	// Char ;
					B8(0011000),
					B8(0011000),
					B8(0000000),
					B8(0011000),
					B8(0011000),
					B8(0110000),

					B8(0000110),	// Char <
					B8(0001100),
					B8(0011000),
					B8(0110000),
					B8(0011000),
					B8(0001100),
					B8(0000110),

					B8(0000000),	// Char =
					B8(0000000),
					B8(0111110),
					B8(0000000),
					B8(0111110),
					B8(0000000),
					B8(0000000),

					B8(0110000),	// Char >
					B8(0011000),
					B8(0001100),
					B8(0000110),
					B8(0001100),
					B8(0011000),
					B8(0110000),

					B8(0111110),	// Char ?
					B8(1100011),
					B8(0000011),
					B8(0001110),
					B8(0011000),
					B8(0000000),
					B8(0011000),

					B8(0111110),	// Char @
					B8(1100011),
					B8(1101111),
					B8(1101011),
					B8(1101111),
					B8(1100000),
					B8(0111100),

					B8(0011100),	// Char A
					B8(0111110),
					B8(1100011),
					B8(1100011),
					B8(1111111),
					B8(1100011),
					B8(1100011),

					B8(1111110),	// Char B
					B8(1100011),
					B8(1100011),
					B8(1111110),
					B8(1100011),
					B8(1100011),
					B8(1111110),

					B8(0011110),	// Char C
					B8(0110011),
					B8(1100000),
					B8(1100000),
					B8(1100000),
					B8(0110011),
					B8(0011110),

					B8(1111100),	// Char D
					B8(1100110),
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1100110),
					B8(1111100),

					B8(1111111),	// Char E
					B8(1100000),
					B8(1100000),
					B8(1111100),
					B8(1100000),
					B8(1100000),
					B8(1111111),

					B8(1111111),	// Char F
					B8(1100000),
					B8(1100000),
					B8(1111100),
					B8(1100000),
					B8(1100000),
					B8(1100000),

					B8(0011110),	// Char G
					B8(0110011),
					B8(1100000),
					B8(1100000),
					B8(1100111),
					B8(0110011),
					B8(0011111),

					B8(1100011),	// Char H
					B8(1100011),
					B8(1100011),
					B8(1111111),
					B8(1100011),
					B8(1100011),
					B8(1100011),

					B8(0011100),	// Char I
					B8(0011100),
					B8(0011100),
					B8(0011100),
					B8(0011100),
					B8(0011100),
					B8(0011100),

					B8(0000011),	// Char J
					B8(0000011),
					B8(0000011),
					B8(0000011),
					B8(1100011),
					B8(1100011),
					B8(0111110),

					B8(1100011),	// Char K
					B8(1100111),
					B8(1101100),
					B8(1111000),
					B8(1101100),
					B8(1100111),
					B8(1100011),

					B8(1100000),	// Char L
					B8(1100000),
					B8(1100000),
					B8(1100000),
					B8(1100000),
					B8(1100000),
					B8(1111111),

					B8(1100011),	// Char M
					B8(1110111),
					B8(1111111),
					B8(1111111),
					B8(1101011),
					B8(1100011),
					B8(1100011),

					B8(1100011),	// Char N
					B8(1110011),
					B8(1111011),
					B8(1101111),
					B8(1100111),
					B8(1100011),
					B8(1100011),

					B8(0111110),	// Char O
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(0111110),

					B8(1111110),	// Char P
					B8(1100011),
					B8(1100011),
					B8(1111110),
					B8(1100000),
					B8(1100000),
					B8(1100000),

					B8(0111110),	// Char Q
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1101111),
					B8(0111110),
					B8(0000111),

					B8(1111110),	// Char R
					B8(1100011),
					B8(1100011),
					B8(1111110),
					B8(1100110),
					B8(1100011),
					B8(1100011),

					B8(0111110),	// Char S
					B8(1100011),
					B8(1110000),
					B8(0111110),
					B8(0000111),
					B8(1100011),
					B8(0111110),

					B8(1111111),	// Char T
					B8(0011100),
					B8(0011100),
					B8(0011100),
					B8(0011100),
					B8(0011100),
					B8(0011100),

					B8(1100011),	// Char U
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1110011),
					B8(0111111),

					B8(1100011),	// Char V
					B8(1100011),
					B8(1100011),
					B8(1100011),
					B8(1110111),
					B8(0111110),
					B8(0011100),

					B8(1100011),	// Char W
					B8(1100011),
					B8(1100011),
					B8(1101011),
					B8(1111111),
					B8(1110111),
					B8(1100011),

					B8(1100011),	// Char X
					B8(1110111),
					B8(0111110),
					B8(0011100),
					B8(0111110),
					B8(1110111),
					B8(1100011),

					B8(0110011),	// Char Y
					B8(0110011),
					B8(0110011),
					B8(0011110),
					B8(0001100),
					B8(0001100),
					B8(0001100),

					B8(1111111),	// Char Z
					B8(0000011),
					B8(0000110),
					B8(0001100),
					B8(0011000),
					B8(0110000),
					B8(1111111),

					B8(0111110),	// Char [
					B8(0110000),
					B8(0110000),
					B8(0110000),
					B8(0110000),
					B8(0110000),
					B8(0111110),

					B8(1100000),	// Char backslash
					B8(0110000),
					B8(0011000),
					B8(0001100),
					B8(0000110),
					B8(0000011),
					B8(0000001),

					B8(0111110),	// Char ]
					B8(0000110),
					B8(0000110),
					B8(0000110),
					B8(0000110),
					B8(0000110),
					B8(0111110),

					B8(0001000),	// Char ^
					B8(0011100),
					B8(0110110),
					B8(1100011),
					B8(0000000),
					B8(0000000),
					B8(0000000),

					B8(0000000),	// Char _
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(1111111),

					B8(0011000),	// Char `
					B8(0011000),
					B8(0001100),
					B8(0000000),
					B8(0000000),
					B8(0000000),
					B8(0000000)
			};
